#!/usr/bin/env python3
import subprocess
import time
from pathlib import Path


def set_performance():
    """Set performance mode."""
    subprocess.run(
        ['cpupower', 'frequency-set', '-g', 'performance'], check=False
    )
    subprocess.run(['powertop', '--auto-tune'], check=False)

    for policy in Path('/sys/devices/system/cpu/cpufreq').glob('policy*'):
        (policy / 'scaling_governor').write_text('performance')

    Path('/sys/module/snd_hda_intel/parameters/power_save').write_text('0')
    Path('/proc/sys/vm/dirty_writeback_centisecs').write_text('1000')

    gpu_path = Path(
        '/sys/class/drm/card0/device/power_dpm_force_performance_level'
    )
    if gpu_path.exists():
        gpu_path.write_text('high')


def set_powersave():
    """Set power save mode."""
    subprocess.run(
        ['cpupower', 'frequency-set', '-g', 'powersave'], check=False
    )
    subprocess.run(['powertop', '--auto-tune'], check=False)

    for policy in Path('/sys/devices/system/cpu/cpufreq').glob('policy*'):
        (policy / 'scaling_governor').write_text('powersave')

    Path('/sys/module/snd_hda_intel/parameters/power_save').write_text('1')
    Path('/proc/sys/vm/dirty_writeback_centisecs').write_text('1500')

    gpu_path = Path(
        '/sys/class/drm/card0/device/power_dpm_force_performance_level'
    )
    if gpu_path.exists():
        gpu_path.write_text('auto')


def main():
    """Main loop."""
    while True:
        try:
            result = subprocess.run(
                ['acpi', '-a'],
                capture_output=True,
                text=True,
                check=True,
            )

            if 'on-line' in result.stdout:
                set_performance()
            else:
                set_powersave()

        except Exception as e:
            print(f'Error: {e}')

        time.sleep(60)


if __name__ == '__main__':
    main()

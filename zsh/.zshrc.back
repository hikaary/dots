# Переменные окружения
export TERM='xterm-256color'
export PATH="$HOME/.bun/bin:$HOME/.cargo/bin:$PATH:$HOME/.local/bin/"
export EDITOR='/usr/bin/nvim'
export VISUAL='nvim'
export GENIE_LANGUAGE="ru"
export RUST_BACKTRACE='full'
export PYTHON_KEYRING_BACKEND='keyring.backends.null.Keyring'
export __GL_THREADED_OPTIMIZATIONS='0'
export ANTHROPIC_API_KEY=$(cat ~/creds/claude)
export TAVILY_API_KEY=$(cat ~/creds/tavily)

# История
HISTFILE="$HOME/.local/share/zsh/history"
HISTSIZE=100000
SAVEHIST=100000
setopt APPEND_HISTORY
setopt HIST_IGNORE_DUPS
setopt SHARE_HISTORY
setopt INC_APPEND_HISTORY

# Создание директории для хранения истории, если она не существует
[[ -d "$(dirname "$HISTFILE")" ]] || mkdir -p "$(dirname "$HISTFILE")"

# Установка режима клавиатуры (эмаксовский)
bindkey -e

# Быстрая инициализация компиляции
autoload -Uz compinit
if [ -n "$(find ~/.zcompdump -mtime +1)" ]; then
  compinit
else
  compinit -C
fi

# Установка Zinit если его нет
if [[ ! -f $HOME/.local/share/zinit/zinit.git/zinit.zsh ]]; then
    print -P "%F{33}▓▒░ %F{220}Installing %F{33}ZDHARMA-CONTINUUM%F{220} Initiative Plugin Manager (%F{33}zdharma-continuum/zinit%F{220})…%f"
    command mkdir -p "$HOME/.local/share/zinit" && command chmod g-rwX "$HOME/.local/share/zinit"
    command git clone https://github.com/zdharma-continuum/zinit "$HOME/.local/share/zinit/zinit.git" && \
        print -P "%F{33}▓▒░ %F{34}Installation successful.%f%b" || \
        print -P "%F{160}▓▒░ The clone has failed.%f%b"
fi

source "$HOME/.local/share/zinit/zinit.git/zinit.zsh"

# Загрузка основных плагинов
zinit ice compile'(pure|async).zsh' pick'async.zsh' src'pure.zsh'
zinit light sindresorhus/pure

# Отложенная загрузка плагинов
zinit wait lucid light-mode for \
  atinit"zicompinit; zicdreplay" \
    zdharma-continuum/fast-syntax-highlighting \
  atload"_zsh_autosuggest_start" \
    zsh-users/zsh-autosuggestions \
  blockf atpull'zinit creinstall -q .' \
    zsh-users/zsh-completions

# Отложенная загрузка fzf-tab
zinit wait lucid light-mode for \
  Aloxaf/fzf-tab

# Остальные плагины с отложенной загрузкой
zinit wait lucid for \
  zsh-users/zsh-history-substring-search \
  hlissner/zsh-autopair

# Загрузка цветовой схемы
source ~/.config/zsh/catppuccin_mocha-zsh-syntax-highlighting.zsh

# Настройка FZF
if command -v fd > /dev/null; then
    export FZF_DEFAULT_OPTS=" \
    --color=bg+:#313244,bg:#1e1e2e,spinner:#f5e0dc,hl:#f38ba8 \
    --color=fg:#cdd6f4,header:#f38ba8,info:#cba6f7,pointer:#f5e0dc \
    --color=marker:#b4befe,fg+:#cdd6f4,prompt:#cba6f7,hl+:#f38ba8 \
    --color=selected-bg:#45475a \
    --multi"
    export FZF_ALT_C_COMMAND="fd --type d"
    export FZF_DEFAULT_COMMAND="fd --type f"
    export FZF_PREVIEW_DIR_CMD="ls -l --color=always"
    export FZF_PREVIEW_FILE_CMD="cat -n"
    export FZF_FD_OPTS="--hidden --exclude=.git"
fi

# Настройка fzf-tab
zinit wait'1' lucid light-mode for \
  atinit"zstyle ':fzf-tab:*' fzf-command fzf
         zstyle ':fzf-tab:*' fzf-preview 'bat --color=always --style=numbers --line-range=:500 {}'
         zstyle ':fzf-tab:*' fzf-pad 4" \
  Aloxaf/fzf-tab

# Привязки клавиш (оптимизированные)
bindkey '^H' backward-kill-word
bindkey '^[[3;5~' kill-word
bindkey '^[[3~' delete-char
bindkey '^[[1;5D' backward-word
bindkey '^[[1;5C' forward-word
bindkey '^Z' push-input

# Привязка для history-substring-search (после загрузки плагина)
zinit wait lucid light-mode for \
  atload'bindkey "^[[A" history-substring-search-up;
         bindkey "^[[B" history-substring-search-down' \
  zsh-users/zsh-history-substring-search

# Алиасы
alias v='mgraftcp --socks5 127.0.0.1:2080 nvim'
alias zed='mgraftcp --socks5 127.0.0.1:2080 zeditor'
alias restart-foot='pkill -f "foot-server" && riverctl spawn "foot --server"'
alias px='proxychains4 -q'
alias proxy='mgraftcp --socks5 127.0.0.1:2080'
alias kvnt_db_test='rainfrog --url $(cat ~/creds/kvant_test_db_url)'
alias kvnt_db_email='rainfrog --url $(cat ~/creds/kvant_email_db_url)'
alias lg='gitu'
alias ta='tmux attach'
alias ..='cd ..'
alias ld='oxker'
alias s='sudo'
alias music='mgraftcp --socks5 127.0.0.1:2080 spotify_player'
alias vs='source .venv/bin/activate'
alias l='exa -lah --icons'
alias tree='exa --tree --level=2 --icons'
alias csv-view='csvlens'
alias parse_dir="repomix --ignore '*.lock,docs/*,.git/*,.idea/*,.vscode/*,__pycache__'"

# Функции
detect-project-type() {
    if [ -f "package.json" ]; then
        echo "node"
    elif [ -f "requirements.txt" ] || [ -f "Pipfile" ] || [ -f "pyproject.toml" ]; then
        echo "python"
    elif [ -f "docker-compose.yml" ] || [ -f "Dockerfile" ]; then
        echo "docker"
    else
        echo "default"
    fi
}

hikary-update-all() {
    export TMPFILE="$(mktemp)"; \
        sudo true; \
        rate-mirrors --save=$TMPFILE arch --max-delay=43200 \
          && sudo mv /etc/pacman.d/mirrorlist /etc/pacman.d/mirrorlist-backup \
          && sudo mv $TMPFILE /etc/pacman.d/mirrorlist

    sudo pacman -Syu --noconfirm
    paru -Syu --noconfirm
}


extract() {
    if [ -z "$1" ]; then
        echo "Usage: extract <file>"
        return 1
    fi

    local file="$1"
    if [ ! -f "$file" ]; then
        echo "'$file' is not a valid file"
        return 1
    fi

    case "$file" in
        *.tar.bz2|*.tbz|*.tbz2) tar xvjf "$file" ;;
        *.tar.gz|*.tgz) tar xvzf "$file" ;;
        *.tar.xz|*.txz) tar xvf "$file" ;;
        *.tar.Z) tar xvZf "$file" ;;
        *.bz2) bunzip2 "$file" ;;
        *.deb) ar x "$file" ;;
        *.gz) gunzip "$file" ;;
        *.pkg) pkgutil --expand "$file" ;;
        *.rar) unrar x "$file" ;;
        *.tar) tar xvf "$file" ;;
        *.xz) xz --decompress "$file" ;;
        *.zip|*.war|*.jar|*.nupkg) unzip "$file" ;;
        *.Z) uncompress "$file" ;;
        *.7z) 7za x "$file" ;;
        *) echo "unsupported file extension"; return 1 ;;
    esac
}

# Отложенная загрузка автоактивации venv
zinit wait'0' lucid light-mode for \
  atload'
    auto_activate_venv() {
      if [[ -d .venv ]] && [[ ! -n "${VIRTUAL_ENV}" ]]; then
        echo "Activating virtual environment..."
        source .venv/bin/activate
      elif [[ -n "${VIRTUAL_ENV}" ]] && [[ "${VIRTUAL_ENV}" == *"$(pwd)/.venv"* ]]; then
        echo "Deactivating virtual environment..."
        deactivate
      fi
    }
    add-zsh-hook chpwd auto_activate_venv
  ' \
  zdharma-continuum/null
